devtools::document()
?matching
devtools::document()
?percentiles
?matching
?ggplot
??ggplot
library(devtools)
library(roxygen2)
devtools::document()
?percentiles
?socdemResults
devtools::document()
?percentiles
?socdemResults
?percentileResults
Sys.which("git")
Sys.setenv(GIT = "C:\\SMARTD~1\\apps\\git-2.47\\bin\\git.exe")
install.packages("usethis")
library(usethis)
usethis::use_git_config(user.name = "Elena", user.email = "elena.sola-veranavarro@oecd.org")
git_sitrep()
gitcreds::gitcreds_set()
# This will create a new repository on GitHub and connect it
usethis::use_github()
# Replace with your actual GitHub repository URL
usethis::use_git_remote("origin", "https://github.com/elenasolaveranavarro/EGDHW.git")
?myexpit
??myexpit
library(devtools)
devtools::document()
devtools::document()
library(devtools)
devtools::build_readme()
usethis::use_readme_rmd()
devtools::build_readme()
# install.packages("devtools") #install devtools if not installed
devtools::install_github("elenasolaveranavarro/EGDHW")
library(centralisedapproach)
## Define the country for the analysis (ISO-2, lowercase, for Luxembourg Wealth Study)
country <- "ESP"
## Set the year for analysis. This will be the year for the national accounts and either the year or interpolated year for the survey
year <- 2022
# Working directory
# setwd("...")
# Use the egdhwNationalAccountsTotals to retrieve the macro data
var_name <- paste0(country,"_",year)
assign(var_name, egdhwNationalAccountsTotals(country,"S1M", year, consolidated = FALSE))
# Merge predefined dataframe to have all the relevant variable/code pairs
nationalAccounts <- nationalAccounts %>%
left_join(get(paste0(country,"_",year)), by = c("codes" = "series"), copy = TRUE) %>%
mutate(values = OBS_VALUE) %>%
select(name, codes, values)
devtools:build_readme()
# install.packages("devtools") #install devtools if not installed
library(devtools)
devtools::build_readme()
coverage_plot <- function(year, country, data) {
plot_name <- paste0("coverage_", country, "_", year)
graph <- ggplot(data, aes(x = item, y = coverage * 100, fill = Method)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "PuBu") +
scale_y_continuous(breaks = c(100, 200, 300))
labs(x = "National accounts item",
y = "Coverage ratio (percentage)",
fill = "Method",
subtitle = paste0(country, " ", year)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom"
)
assign(plot_name, graph, envir = .GlobalEnv)
return(graph)
}
# Creating coverage plots for the US, selected years
data_cov_2022 <- tidy_coverage_data("US", 2022, "_imp.xlsx")
################################################################################
#                            DATA VISUALIZATION
#              DISTRIBUTIONAL HOUSEHOLD WEALTH ACROSS COUNTRIES
################################################################################
### Set up ---------------------------------------------------------------------
# Required packages
if(!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, ggthemes, patchwork, readxl, devtools, roxygen2)
# Set working directory
setwd("C:/Users/Sola-veranavarro_E/OneDrive - OECD/Documents/EG DHW/package")
#usethis::create_package("C:/Users/Sola-veranavarro_E/OneDrive - OECD/Documents/EG DHW/package")
################################################################################
# PART 1. COUNTRY-YEAR GRAPHS
################################################################################
## COVERAGE RATIOS  --------------------------------------
#' Tidy Coverage Ratio Data for Analysis
#'
#' Imports and processes coverage ratio data from Excel file containing
#' distributional wealth estimates from LWS. Transforms the data to
#' long format and applies cleaning steps for visualization.
#'
#' @param country Character string specifying the country code (e.g., "US", "DE") -
#'    should match the one in the excel file name
#' @param year Numeric value year (e.g., 2016, 2019)
#' @param file_suffix Character string for file name. Default is ".xlsx"
#' @param exclude_methods Character vector of method names to exclude from analysis.
#'   Default excludes "initial" and "adjusted" stages, following presentation of april 2025
#' @param coverage_threshold Numeric threshold above which coverage ratios are
#'   considered extreme and replaced with Inf. Default is 5
#' @param range string of excel cells where the data is located. No need to modify
#'   unless changes in the output where made, e.g. not all usual items are included
#'
#' @return tibble with 3 columns: method, item, and coverage
#'
#' @export
tidy_coverage_data <- function(country, year, file_suffix = ".xlsx",
exclude_methods = c("initial", "adjusted"),
coverage_threshold = 5, range = "A1:AK7") {
# Construct file path
file_path <- paste0(country, year, file_suffix)
# Import data and select values of interest
data_coverage <- read_excel(file_path, range = range)
data_coverage <- data_coverage %>%
rename_with(.cols = 1, ~ "Method") %>%  # Rename first column to "Method"
mutate(across(starts_with("coverage."), as.numeric))  # Ensure numeric coverage ratios
# Reshape to long format for graph
long_coverage <- data_coverage %>%
pivot_longer(
cols = starts_with("coverage."),
names_to = "item",
names_prefix = "coverage.",  # Remove "coverage." prefix from item names
values_to = "coverage"
) %>%
filter(!Method %in% exclude_methods) %>%  # Remove specified methods
na.omit() %>%  # Remove observations with missing coverage ratios
mutate(
# Replace extreme values with infinity to prevent visualization issues
coverage = ifelse(coverage > coverage_threshold, Inf, coverage)
)
return(long_coverage)
}
#' Create Coverage Ratio barplot
#'
#' Generates a graph of coverage ratios across different four data stages and
#' national accounts items. The goal is to visualize how well the microdata
#' aligns to macroeconomic aggregates
#'
#' @param country Character string for country identifier (used in plot title)
#' @param year Numeric year for analysis (used in plot title)
#' @param data Tibble containing tidied coverage data
#'
#' @return ggplot object that is saved in the global environment
#'
#' @export
coverage_plot <- function(year, country, data) {
plot_name <- paste0("coverage_", country, "_", year)
graph <- ggplot(data, aes(x = item, y = coverage * 100, fill = Method)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "PuBu") +
scale_y_continuous(breaks = c(100, 200, 300))
labs(x = "National accounts item",
y = "Coverage ratio (percentage)",
fill = "Method",
subtitle = paste0(country, " ", year)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom"
)
assign(plot_name, graph, envir = .GlobalEnv)
return(graph)
}
# Creating coverage plots for the US, selected years
data_cov_2022 <- tidy_coverage_data("US", 2022, "_imp.xlsx")
source("~/EG DHW/Centralised approach/graphs/graphs_functions.R", echo = TRUE)
plot_all_country <- function(country, statistic) {
# Years expected
years <- c(2010, 2013, 2016, 2019, 2022)
# Dynamically retrieve the ggplot objects
plots <- lapply(years, function(y) {
obj_name <- paste0(statistic, "_", y)
if (!exists(obj_name, envir = .GlobalEnv)) {
stop(paste("Plot object", obj_name, "does not exist."))
}
get(obj_name, envir = .GlobalEnv)
})
# Add plot_spacer() for bottom-right slot
plots[[6]] <- patchwork::plot_spacer()
# Assemble patchwork
pw <- (plots[[1]] + plots[[2]] + plots[[3]]) /
(plots[[4]] + plots[[5]] + plots[[6]]) /
patchwork::guide_area() +
patchwork::plot_layout(guides = "collect", heights = c(4, 4, 1)) &
theme(legend.position = "bottom", legend.direction = "horizontal")
return(pw)
}
# Combining in the same grid yearly graphs for the US
coverage_all <- plot_all_country("US", "coverage")
coverage_all
coverage_2010
graph <- ggplot(data, aes(x = item, y = coverage * 100, fill = Method)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "PuBu") +
scale_y_continuous(breaks = c(100, 200, 300)) +
labs(x = "National accounts item",
y = "Coverage ratio (percentage)",
fill = "Method",
subtitle = paste0(country, " ", year)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom"
)
coverage_plot <- function(year, country, data) {
plot_name <- paste0("coverage_", country, "_", year)
graph <- ggplot(data, aes(x = item, y = coverage * 100, fill = Method)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "PuBu") +
scale_y_continuous(breaks = c(100, 200, 300)) +
labs(x = "National accounts item",
y = "Coverage ratio (percentage)",
fill = "Method",
subtitle = paste0(country, " ", year)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom"
)
assign(plot_name, graph, envir = .GlobalEnv)
return(graph)
}
# Creating coverage plots for the US, selected years
data_cov_2022 <- tidy_coverage_data("US", 2022, "_imp.xlsx")
data_cov_2019 <- tidy_coverage_data("US", 2019, "_imp.xlsx")
# Creating coverage plots for the US, selected years
data_cov_2022 <- tidy_coverage_data("US", 2022, "_imp.xlsx")
data_cov_2019 <- tidy_coverage_data("US", 2019, "_imp.xlsx")
data_cov_2016 <- tidy_coverage_data("US", 2016, "_imp.xlsx")
data_cov_2013 <- tidy_coverage_data("US", 2013, "_imp.xlsx")
data_cov_2010 <- tidy_coverage_data("US", 2010, "_imp.xlsx", range = "A1:AG7") # In 2010 we dont have the NA for two-digit level items of currency and deposits
coverage_2022 <- coverage_plot(2022, "United States", data_cov_2022)
coverage_2019 <- coverage_plot(2019, "United States", data_cov_2019)
coverage_2016 <- coverage_plot(2016, "United States", data_cov_2016)
coverage_2013 <- coverage_plot(2013, "United States", data_cov_2013)
coverage_2010 <- coverage_plot(2010, "United States", data_cov_2010)
plot_all_country <- function(country, statistic) {
# Years expected
years <- c(2010, 2013, 2016, 2019, 2022)
# Dynamically retrieve the ggplot objects
plots <- lapply(years, function(y) {
obj_name <- paste0(statistic, "_", y)
if (!exists(obj_name, envir = .GlobalEnv)) {
stop(paste("Plot object", obj_name, "does not exist."))
}
get(obj_name, envir = .GlobalEnv)
})
# Add plot_spacer() for bottom-right slot
plots[[6]] <- patchwork::plot_spacer()
# Assemble patchwork
pw <- (plots[[1]] + plots[[2]] + plots[[3]]) /
(plots[[4]] + plots[[5]] + plots[[6]]) /
patchwork::guide_area() +
patchwork::plot_layout(guides = "collect", heights = c(4, 4, 1)) &
theme(legend.position = "bottom", legend.direction = "horizontal")
return(pw)
}
# Combining in the same grid yearly graphs for the US
coverage_all <- plot_all_country("US", "coverage")
coverage_all
coverage_plot <- function(year, country, data) {
plot_name <- paste0("coverage_", country, "_", year)
graph <- ggplot(data, aes(x = item, y = coverage * 100, fill = Method)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
scale_fill_brewer(palette = "PuBu") +
expand_limits(y = c(0, 300)) +
scale_y_continuous(breaks = c(100, 200, 300)) +
labs(x = "National accounts item",
y = "Coverage ratio (percentage)",
fill = "Method",
subtitle = paste0(country, " ", year)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.text = element_text(size = 8),
legend.position = "bottom"
)
assign(plot_name, graph, envir = .GlobalEnv)
return(graph)
}
# Creating coverage plots for the US, selected years
data_cov_2022 <- tidy_coverage_data("US", 2022, "_imp.xlsx")
data_cov_2019 <- tidy_coverage_data("US", 2019, "_imp.xlsx")
data_cov_2016 <- tidy_coverage_data("US", 2016, "_imp.xlsx")
data_cov_2013 <- tidy_coverage_data("US", 2013, "_imp.xlsx")
data_cov_2010 <- tidy_coverage_data("US", 2010, "_imp.xlsx", range = "A1:AG7") # In 2010 we dont have the NA for two-digit level items of currency and deposits
coverage_2022 <- coverage_plot(2022, "United States", data_cov_2022)
coverage_2019 <- coverage_plot(2019, "United States", data_cov_2019)
coverage_2016 <- coverage_plot(2016, "United States", data_cov_2016)
coverage_2013 <- coverage_plot(2013, "United States", data_cov_2013)
coverage_2010 <- coverage_plot(2010, "United States", data_cov_2010)
coverage_2010
# Combining in the same grid yearly graphs for the US
coverage_all <- plot_all_country("US", "coverage")
coverage_all
# Export
ggsave(paste0("graphs/US_coverage_all.png"), coverage_all, width = 10 , height = 7, dpi = 300)
# Install if needed
install.packages("diffobj")
library(diffobj)
# Compare two script files
diffFile("script1.R", "script2.R")
diffFile("us2010_update.R", "us2013_update.R")
setwd(C:/Users/Sola-veranavarro_E/OneDrive - OECD/Documents/EG DHW/Centralised approach/scripts)
setwd("C:/Users/Sola-veranavarro_E/OneDrive - OECD/Documents/EG DHW/Centralised approach/scripts")
diffFile("us2010_update.R", "us2013_update.R")
diffFile("us2010_update.R", "us2022_update.R")
source("~/EG DHW/Centralised approach/graphs/graphs_functions.R", echo = TRUE)
source("~/EG DHW/Centralised approach/graphs/graphs_functions.R", echo = TRUE)
tidy_wealth_data <- function(country, year, file_suffix = "_final.xlsx") {
# Import data from excel file
data_deciles <- read_excel(paste0(country, year, file_suffix), col_names = T, skip = 14)
imputed_shares <- data_deciles[23:32, ] %>% mutate(stage = "Micro data")
aligned_shares <-  data_deciles[34:43, ] %>% mutate(stage = "Proportional Allocation")
pareto_shares <- data_deciles[45:54, ] %>% mutate(stage = "Pareto")
pareto_aligned_shares <- data_deciles[56:65, ] %>% mutate(stage = "Centralised Approach")
# For now we don't calculate adjusted so I omit it from the final data to produce graphs
# Also omit initial following the presentation of results April 2025
combined_deciles <- bind_rows(imputed_shares, aligned_shares, pareto_shares, pareto_aligned_shares) %>%
rename("decile" = ...1) %>%
rename_with(~ sub("^initial.", "", .x), starts_with("initial."))
# Select net wealth variable  (B90.N._Z), which ranges from 0 to 1.
# Transform as numeric and multiply by 100 to get percentages
netwealth_shares <- combined_deciles %>%
select(decile, B90.N._Z, stage) %>%
mutate(B90.N._Z = as.numeric(B90.N._Z)*100,
decile = factor(decile,
levels = c("D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10")))
return(netwealth_shares)
}
#' Graph Net Wealth Shares by Deciles
#'
#' Generates a graph with the percentage of national net wealth owned by each decile
#' for a given country and year. Considers 4 data stages: aligned (proportional allocation),
#' imputed (micro), pareto, and pareto aligned (centralised approach)
#'
#' @param country Character string for country identifier (used in plot title)
#' @param year Numeric year for analysis (used in plot title)
#' @param data Tibble containing tidied gini data
#'
#' @return ggplot object that is saved in the global environment
#'
#' @export
plot_shares <- function(country, year, data){
plot_name <- paste("shares_", country, "_" ,year)
graph <- ggplot(data, aes(x = decile, y = B90.N._Z, color = stage, group = stage)) +
geom_point() +
geom_line() +
labs(x = "Deciles", y = "Net wealth share (%)", color = "stage",
subtitle = paste0(country, " ", year)) +
scale_y_continuous(limits = c(-20, 100)) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
legend.position = "bottom"
)
assign(plot_name, graph, envir = .GlobalEnv)
return(graph)
}
# Net wealth shares by decile, United States selected years
data_wealth_2022 <- tidy_wealth_data("US", 2022)
data_wealth_2019 <- tidy_wealth_data("US", 2019)
data_wealth_2016 <- tidy_wealth_data("US", 2016)
data_wealth_2013 <- tidy_wealth_data("US", 2013)
data_wealth_2010 <- tidy_wealth_data("US", 2010)
shares_2022 <- plot_shares(2022, "United States", data_wealth_2022)
shares_2019 <- plot_shares(2019, "United States", data_wealth_2019)
shares_2016 <- plot_shares(2016, "United States", data_wealth_2016)
shares_2013 <- plot_shares(2013, "United States", data_wealth_2013)
shares_2010 <- plot_shares(2010, "United States", data_wealth_2010)
#################################################################################
# PART 2. COUNTRY EVOLUTION
################################################################################
#' Plot all years for a given Country
#'
#' This function generates a time series plot for a specified statistic
#' (e.g., coverage, gini, number of persons, or percentile shares) and country using pre-loaded
#' yearly plot objects.
#'
#' @param country A string indicating the country to plot (must match the `country` column in your data).
#' @param statistic A string indicating the statistic type (e.g., "coverage", "gini", etc).
#' Note that the string name has to coincide with the one given to the ggplot, so that the
#' function can call the corresponding object
#'
#' @return A ggplot object displaying the time plots for the specified country and statistic.
#'
#' @export
plot_all_country <- function(country, statistic) {
# Years expected
years <- c(2010, 2013, 2016, 2019, 2022)
# Dynamically retrieve the ggplot objects
plots <- lapply(years, function(y) {
obj_name <- paste0(statistic, "_", y)
if (!exists(obj_name, envir = .GlobalEnv)) {
stop(paste("Plot object", obj_name, "does not exist."))
}
get(obj_name, envir = .GlobalEnv)
})
# Add plot_spacer() for bottom-right slot
plots[[6]] <- patchwork::plot_spacer()
# Assemble patchwork
pw <- (plots[[1]] + plots[[2]] + plots[[3]]) /
(plots[[4]] + plots[[5]] + plots[[6]]) /
patchwork::guide_area() +
patchwork::plot_layout(guides = "collect", heights = c(4, 4, 1)) &
theme(legend.position = "bottom", legend.direction = "horizontal")
return(pw)
}
# Combining in the same grid yearly graphs for the US
coverage_all <- plot_all_country("US", "coverage")
gini_all <- plot_all_country("US", "gini")
person_all <- plot_all_country("US", "person")
shares_all <- plot_all_country("US", "shares")
# Export
ggsave(paste0("graphs/US_coverage_all.png"), coverage_all, width = 10 , height = 7, dpi = 300)
ggsave(paste0("graphs/US_gini_all.png"), gini_all, width = 10, height = 7, dpi = 300)
ggsave(paste0("graphs/US_person_all.png"), person_all, width = 10, height = 6, dpi = 300)
ggsave(paste0("graphs/US_shares_all.png"), shares_all, width = 10, height = 6, dpi = 300)
